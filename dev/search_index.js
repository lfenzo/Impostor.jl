var documenterSearchIndex = {"docs":
[{"location":"providers/finance/#Finance","page":"Finance","title":"Finance","text":"","category":"section"},{"location":"providers/finance/","page":"Finance","title":"Finance","text":"The following generator functions are available in the Finance provider:","category":"page"},{"location":"providers/finance/","page":"Finance","title":"Finance","text":"using Impostor # hide\nusing CSV # hide\nusing DataFrames # hide\ninclude(joinpath(pkgdir(Impostor), \"snippets\", \"collect-statistics.jl\")) # hide\ncollect_provider_availability_statistics(\"finance\") # hide","category":"page"},{"location":"providers/finance/","page":"Finance","title":"Finance","text":"","category":"page"},{"location":"providers/finance/","page":"Finance","title":"Finance","text":"bank_name\nbank_official_name\ncredit_card_cvv\ncredit_card_expiry\ncredit_card_number\ncredit_card_vendor","category":"page"},{"location":"providers/finance/#Impostor.bank_name","page":"Finance","title":"Impostor.bank_name","text":"bank_name(n::Integer = 1; kwargs...)\nbank_name(options::Vector, n::Integer; level::Symbol, kwargs...)\nbank_name(mask::Vector; level::Symbol, kwargs...)\n\nParameters\n\nn::Integer = 1: number of bank name entries to generate\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :bank_code: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\nExample\n\njulia> bank_name(5; locale = [\"pt_BR\"])\n5-element Vector{String}:\n \"Broker\"\n \"Nubank\"\n \"Itaubank\"\n \"Renascenca\"\n \"Daycoval\"\n\n\n\n\n\n","category":"function"},{"location":"providers/finance/#Impostor.bank_official_name","page":"Finance","title":"Impostor.bank_official_name","text":"bank_official_name(n::Integer = 1; kwargs...)\nbank_official_name(options::Vector, n::Integer; level::Symbol, kwargs...)\nbank_official_name(mask::Vector; level::Symbol, kwargs...)\n\nParameters\n\nn::Integer = 1: number of official bank name entries to generate\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :bank_code: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/finance/#Impostor.credit_card_cvv","page":"Finance","title":"Impostor.credit_card_cvv","text":"credit_card_cvv(n::Integer = 1; kwargs...)\n\nGenerate n credit card ccvs, e.g. 034\n\nExamples\n\njulia> credit_card_cvv(3)\n3-element Vector{Int64}:\n 636\n 429\n 117\n\n\n\n\n\n\n","category":"function"},{"location":"providers/finance/#Impostor.credit_card_expiry","page":"Finance","title":"Impostor.credit_card_expiry","text":"credit_card_expiry(n::Integer = 1; kwargs...)\n\nGenerate n credit card expiry entries, e.g. 05/2029.\n\nExamples\n\njulia> credit_card_expiry(3)\n3-element Vector{String}:\n \"4/2014\"\n \"7/2013\"\n \"10/2010\"\n\n\n\n\n\n","category":"function"},{"location":"providers/finance/#Impostor.credit_card_number","page":"Finance","title":"Impostor.credit_card_number","text":"credit_card_number(n::Integer = 1; kwargs...)\ncredit_card_number(options::Vector{<:AbstractString}, n::Integer; kwargs...)\ncredit_card_number(mask::Vector{<:AbstractString}; kwargs...)\n\nGenerate valid credit card numbers according to the credit card vendor. Available vendors are:\n\n\"Visa\"\n\"American Express\"\n\"MasterCard\"\n\nParameters\n\nn::Integer = 1: number of credit card numbers to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nformatted::Bool: whether to return the raw credit card numbers e.g. \"3756808757861311\" or to format the output e.g. \"3756-8087-5786-1311\"\n\nExamples\n\njulia> credit_card_number()\n\"5186794250685172\"\n\njulia> credit_card_number(; formatted = true)\n\"4046-7508-2101-2729\"\n\n\n\n\n\n","category":"function"},{"location":"providers/finance/#Impostor.credit_card_vendor","page":"Finance","title":"Impostor.credit_card_vendor","text":"credit_card_vendor(n::Integer = 1; kwargs...)\ncredit_card_vendor(options::Vector{<:AbstractString}, n::Integer; kwargs...)\n\nGenerate n credit card vendor names.\n\nExample\n\njulia> credit_card_vendor(3)\n3-element Vector{String}:\n \"American Express\"\n \"American Express\"\n \"Visa\"\n\n\n\n\n\n","category":"function"},{"location":"providers/finance/","page":"Finance","title":"Finance","text":"","category":"page"},{"location":"providers/identity/#Identity","page":"Identity","title":"Identity","text":"","category":"section"},{"location":"providers/identity/","page":"Identity","title":"Identity","text":"The following generator functions are available in the Identity provider:","category":"page"},{"location":"providers/identity/","page":"Identity","title":"Identity","text":"using Impostor # hide\nusing CSV # hide\nusing DataFrames # hide\ninclude(joinpath(pkgdir(Impostor), \"snippets\", \"collect-statistics.jl\")) # hide\ncollect_provider_availability_statistics(\"identity\") # hide","category":"page"},{"location":"providers/identity/","page":"Identity","title":"Identity","text":"","category":"page"},{"location":"providers/identity/","page":"Identity","title":"Identity","text":"prefix\nbirthdate\nbloodtype\ncomplete_name\nhighschool\nnationality\nuniversity\noccupation\nfirstname\nsurname","category":"page"},{"location":"providers/identity/#Impostor.prefix","page":"Identity","title":"Impostor.prefix","text":"prefix(n::Integer = 1; kws...)\nprefix(options::Vector{String}, n::Integer; kws...)\nprefix(mask::Vector{<:AbstractString}; kws...)\n\nGenerate n name prefixes, e.g. \"Mr.\" and \"Ms.\", from a given locale.\n\nParameters\n\nn::Integer = 1: number of prefixes to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nOptions\n\nThe valid options values for options and mask are:\n\n\"M\" for \"male\"\n\"F\" for \"female\"\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\nExample\n\njulia> prefix([\"F\", \"M\", \"F\"])\n3-element Vector{String}:\n\"Ms.\"\n\"Mr.\"\n\"Ms.\"\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.birthdate","page":"Identity","title":"Impostor.birthdate","text":"birthdate(n::Integer = 1; start::Date, stop::Date)\n\nGenerate n birth date entries between the start and stop dates.\n\nParameters\n\nn::Int = 1: number of dates to generate.\nstart::Date = Date(1900, 1, 1): start of the sampling period.\nstop::Date = Dates.today(): end of the sampling period.\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.bloodtype","page":"Identity","title":"Impostor.bloodtype","text":"bloodtype(n::Integer = 1)\n\nGenerate n blood type entries e.g. \"AB-\", \"O+\" and \"A+\".\n\nParameters\n\nn::Integer = 1: number blood type entries to be generated\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.complete_name","page":"Identity","title":"Impostor.complete_name","text":"complete_name(n::Integer = 1; kws...)\ncomplete_name(options::Vector{<:AbstractString}, n::Integer; kws...)\ncomplete_name(mask::Vector{<:AbstractString}; kws...)\n\nGenerate n or length(mask) full (complete) names from a given locale.\n\nParameters\n\nn::Integer = 1: number of complete names to generate.\n\nOptions\n\nThe valid options values for options and mask are:\n\n\"M\" for \"male\"\n\"F\" for \"female\"\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\nmax_surnames::Integer = 3: maximum number of surnames in each of the generated entries, note that the actual number may be smaller than max_surnames.\n\nExamples\n\njulia> Impostor.complete_name([\"F\"], 5)\n5-element Vector{String}:\n\"Melissa Sheffard\"\n\"Kate Collins\"\n\"Melissa Cornell Fraser\"\n\"Abgail Cornell\"\n\"Abgail Fraser Jameson\"\n\njulia> complete_name([\"F\", \"M\", \"F\", \"F\", \"M\"])\n5-element Vector{String}:\n\"Melissa Sheffard Jameson Cornell\"\n\"Alfred Collins\"\n\"Mary Sheffard Fraser\"\n\"Milly Jameson Fraser\"\n\"Alfred Fraser Collins\"\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.highschool","page":"Identity","title":"Impostor.highschool","text":"highschool(n::Integer = 1; kwargs...)\n\nParameters\n\nn::Integer = 1: number of highschool names to generate.\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.nationality","page":"Identity","title":"Impostor.nationality","text":"nationality(n::Integer = 1; kws...)\nnationality(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\nnationality(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nParameters\n\nn::Integer = 1: number of nationality entries to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :district_name: Level of values in options or mask when using option-based or mask-based eneration. Valid level values are:\n:sex\n:country_code\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.university","page":"Identity","title":"Impostor.university","text":"university(n::Integer = 1; kws...)\nuniversity(fields::Vector{<:AbstractString}, n::Integer; kws...)\nuniversity(field_mask::Vector{<:AbstractString}; kws...)\n\nParameters\n\nn::Integer = 1: number of university entries to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nOptions\n\nThe valid options values for elements in options and mask are:\n\n\"business\"\n\"humanities\"\n\"social-sciences\"\n\"natural-sciences\"\n\"formal-sciences\"\n\"public-administration\"\n\"military\"\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.occupation","page":"Identity","title":"Impostor.occupation","text":"occupation(n::Integer = 1; kws...)\noccupation(options::Vector{<:AbstractString}, n::Integer; kws...)\noccupation(mask::Vector{<:AbstractString}; kws...)\n\nGenerate n or length(mask) occupation entries.\n\nParameters\n\nn::Integer = 1: number of prefixes to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nOptions\n\nThe valid options values for the elements in options and mask are:\n\n\"business\"\n\"humanities\"\n\"social-sciences\"\n\"natural-sciences\"\n\"formal-sciences\"\n\"public-administration\"\n\"military\"\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.firstname","page":"Identity","title":"Impostor.firstname","text":"firstname(n::Integer = 1; kws...)\nfirstname(sexes::Vector{<:AbstractString}, n::Integer; kws...)\nfirstname(sexes::Vector{<:AbstractString}; kws...))\n\nGenerate n or length(mask) first names.\n\nParameters\n\nn::Integer = 1: number of first names to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nOptions\n\nThe valid options values for options and mask are:\n\n\"M\" for \"male\"\n\"F\" for \"female\"\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\nExamples\n\njulia> firstname([\"F\"], 4)\n4-element Vector{String}:\n\"Sophie\"\n\"Abgail\"\n\"Sophie\"\n\"Mary\"\n\njulia> firstname([\"F\", \"M\", \"F\", \"F\", \"M\"])\n5-element Vector{String}:\n\"Sophie\"\n\"Carl\"\n\"Milly\"\n\"Amanda\"\n\"John\"\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/#Impostor.surname","page":"Identity","title":"Impostor.surname","text":"surname(n::Integer = 1; kws...)\n\nGenerate a surname using the provided locale as source.\n\nParameters\n\nn::Integer = 1: number of surnames to generate.\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/identity/","page":"Identity","title":"Identity","text":"","category":"page"},{"location":"api_reference/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Pages = [\"api_reference.md\"]","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api_reference/#Generator-Functions","page":"API Reference","title":"Generator-Functions","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Pages = [\n    \"providers/finance.md\",\n    \"providers/identity.md\",\n    \"providers/localization.md\",\n]\nDepth = 1\nOrder = [:function]","category":"page"},{"location":"api_reference/#Templatization","page":"API Reference","title":"Templatization","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Pages = [\n    \"utilities/templatization.md\",\n]\nDepth = 1\nOrder = [:function]","category":"page"},{"location":"api_reference/#Utility-Functions","page":"API Reference","title":"Utility Functions","text":"","category":"section"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"Pages = [\n    \"utilities/utility_functions.md\",\n]\nDepth = 1\nOrder = [:function]","category":"page"},{"location":"api_reference/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"providers/localization/#Localization","page":"Localization","title":"Localization","text":"","category":"section"},{"location":"providers/localization/","page":"Localization","title":"Localization","text":"The following generator functions are available in the Localization provider:","category":"page"},{"location":"providers/localization/","page":"Localization","title":"Localization","text":"using Impostor # hide\nusing CSV # hide\nusing DataFrames # hide\ninclude(joinpath(pkgdir(Impostor), \"snippets\", \"collect-statistics.jl\")) # hide\ncollect_provider_availability_statistics(\"localization\") # hide","category":"page"},{"location":"providers/localization/","page":"Localization","title":"Localization","text":"","category":"page"},{"location":"providers/localization/","page":"Localization","title":"Localization","text":"address\naddress_complement\ncity\ncountry\ncountry_code\ncountry_official_name\ndistrict\npostcode\nstate\nstate_code\nstreet\nstreet_number\nstreet_prefix\nstreet_suffix","category":"page"},{"location":"providers/localization/#Impostor.address","page":"Localization","title":"Impostor.address","text":"address(n::Integer = 1; kws...)\naddress(options::Vector{<:AbstractString}, n::Integer = 1; level::Symbol, kws...)\naddress(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nGenerate n or length(mask) addresses based on options or mask according to the required level. For example, let level = :country_code and options be the required country codes to generate addresses for, e.g. [\"BRA\", \"USA\"], the expected output will contain only addresses (in their specific formats) for location in Brazil (\"BRA\") and the United States (\"USA\"). Other values may be passed as level.\n\nParameters\n\nn::Integer = 1: number of addresses to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :state_code: option level to be used when using option and mask-based generation.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.address_complement","page":"Localization","title":"Impostor.address_complement","text":"address_complement(n::Integer = 1; kws...)\n\nParameters\n\nn::Integer = 1: number of address complements to generate.\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.city","page":"Localization","title":"Impostor.city","text":"city(n::Integer = 1; kws...)\ncity(options::Vector{<:AbstractString}, n::Integer; level, kws...)\ncity(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nParameters\n\nn::Integer = 1: number of country codes to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :state_code: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.country","page":"Localization","title":"Impostor.country","text":"country(n::Integer = 1; kws...)\ncountry(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\ncountry(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nGenerate n or length(mask) country names.\n\nParameters\n\nn::Integer = 1: number of country name entries to generate.\noptions::Vector{<:AbstractString}: vector with with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :country_code: Level of values in options or mask when using option-based or mask-based generation.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.country_code","page":"Localization","title":"Impostor.country_code","text":"country_code(n::Integer = 1; kws...)\ncountry_code(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\ncountry_code(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nGenerate n or length(mask) country codes.\n\nParameters\n\nn::Integer = 1: number of country codes to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :country_code: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.country_official_name","page":"Localization","title":"Impostor.country_official_name","text":"country_official_name(n::Integer = 1; kws...)\ncountry_official_name(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\ncountry_official_name(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nGenerate n or length(mask) country offiical names.\n\nParameters\n\nn::Integer = 1: number of country official names entries to generate.\noptions::Vector{<:AbstractString}: vector with with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :country_code: Level of values in options or mask when using option-based or mask-based generation.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.district","page":"Localization","title":"Impostor.district","text":"district(n::Integer = 1; kws...)\ndistrict(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\ndistrict(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nParameters\n\nn::Integer = 1: number of district names to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :district_name: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.postcode","page":"Localization","title":"Impostor.postcode","text":"postcode(n::Integer = 1; kws...)\n\nParameters\n\nn::Integer = 1: number of postcodes to generate.\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.state","page":"Localization","title":"Impostor.state","text":"state(n::Integer = 1; kws...)\nstate(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\nstate(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nParameters\n\nn::Integer = 1: number of country codes to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :country_code: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.state_code","page":"Localization","title":"Impostor.state_code","text":"state_code(n::Integer = 1; kws...)\nstate_code(options::Vector{<:AbstractString}, n::Integer; level::Symbol, kws...)\nstate_code(mask::Vector{<:AbstractString}; level::Symbol, kws...)\n\nParameters\n\nn::Integer = 1: number of state codes to generate.\noptions::Vector{<:AbstractString}: vector with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\nKwargs\n\nlevel::Symbol = :country_code: Level of values in options or mask when using option-based or mask-based eneration.\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.street","page":"Localization","title":"Impostor.street","text":"street(n::Integer = 1; kws...)\nstreet(options::Vector{<:AbstractString}, n::Integer; kws...)\nstreet(mask::Vector{<:AbstractString}; kws...)\n\nGenerate n street names. Note that for option and mask-based generation the only valid options to provide are country_codes.\n\nParameters\n\nn::Integer = 1: number of street names entries to generate.\noptions::Vector{<:AbstractString}: vector with with options restricting the possible values generated.\nmask::Vector{<:AbstractString}: mask vector with element-wise option restrictions.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.street_number","page":"Localization","title":"Impostor.street_number","text":"street_number(n::Integer = 1)\n\nParameters\n\nn::Integer = 1: number of street numbers to generate.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.street_prefix","page":"Localization","title":"Impostor.street_prefix","text":"street_prefix(n::Integer = 1; kws...)\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/#Impostor.street_suffix","page":"Localization","title":"Impostor.street_suffix","text":"street_suffix(n::Integer = 1; kws...)\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\n\n\n\n\n","category":"function"},{"location":"providers/localization/","page":"Localization","title":"Localization","text":"","category":"page"},{"location":"utilities/templatization/#Templatization-Utilities","page":"Templatization","title":"Templatization Utilities","text":"","category":"section"},{"location":"utilities/templatization/","page":"Templatization","title":"Templatization","text":"render_template\nrender_alphanumeric\nrender_alphanumeric_range","category":"page"},{"location":"utilities/templatization/#Impostor.render_template","page":"Templatization","title":"Impostor.render_template","text":"render_template(template locale) :: String\nrender_template(template, reference_dfrow; locale) :: String\n\nMaterialize a given pre-defined template by splitting template into tokens; each token may by associated to a generator-function exported by Impostor. Tokens associated to generator-functions are excpected to have the excact same spelling as their generator-function correspondents (e.g. the token \"address\" is associated to the generator-function address).\n\nFor practicality, tokens not exported by Impostor (see example below) are just repeated in the materialized template since it is not possible for Impostor to distinguish between badly spelled generator functions and raw text which should be present in materialized template.\n\nOptionally, provide a reference_dfrow with column names which may be referenced by tokens in template. This is useful in the context of hierarchical data manipulation\n\nParameters\n\ntemplate::String: templaate to be materialized.\nreference_dfrow::DataFrames.DataFrameRow: Reference values stored in a single-row DataFrame (DataFrameRow); access to values is made through references to column names of reference_dfrow (see examples below).\n\nExamples\n\nString Materialization\n\njulia> template = \"firstname surname occupation\";\n\njulia> render_template(template; locale=\"en_US\")\n\"Charles Fraser Anthropologyst\"\n\njulia> template = \"I know firstname surname, this person is a(n) occupation\";\n\njulia> render_template(template; locale=\"en_US\")\n\"I know Charles Jameson, this person is a(n) Mathematician\"\n\nMissing Tokens\n\njulia> template = \"firstname lastname\"  # not that there is no such 'lastname' function\n\"firstname lastname\"\n\njulia> render_template(template; locale=\"en_US\")\n\"Kate lastname\"\n\nUsing DataFrameRows\n\njulia> dfrow = DataFrame(state=\"California\", city=\"San Francisco\")[1, :]\n1×2 DataFrame\n Row │ state       city\n     │ String      String\n─────┼───────────────────────────\n   1 │ California  San Francisco\n\njulia> template = \"I live in city (state)\"\n\njulia> render_template(template, dfrow; locale = \"en_US\")\n\"I live in San Francisco (California)\"\n\n\n\n\n\n","category":"function"},{"location":"utilities/templatization/#Impostor.render_alphanumeric","page":"Templatization","title":"Impostor.render_alphanumeric","text":"render_alphanumeric(template::AbstractString; numbers, letters) :: String\n\nReceive an alphanumeric template string (e.g. \"^^^-####\") and generate a string replacing:\n\n'#' chars by random numbers between [0, 9].\n'^' chars by random uppercase letters between A-Z.\n'_' chars by random lowercase letters between a-z.\n'=' chars by random uppercase or lowercase letters between a-z|A-Z.\n\nOptionally, provide numbers to fill the '#' placeholders in template; or letters to fill '^','_' or '=' placeholders. Note that if the length of letters or numbers is smaller than the number of placeholders in each category, the remaining placeholders will be randomly filled according to the character in template.\n\nExamples\n\njulia> render_alphanumeric(\"####\")\n\"6273\"\n\njulia> render_alphanumeric(\"123-####-AAA\")\n\"123-5509-AAA\"\n\njulia> render_alphanumeric(\"__-^^-==-ZZZ123\")\n\"vw-CX-fA-ZZZ123\"\n\njulia> render_alphanumeric(\"__-^^-==-ZZZ###\"; numbers = \"12345\")\n\"qu-RT-St-ZZZ123\"\n\njulia> render_alphanumeric(\"__-^^-==-ZZZ###\"; letters = \"AABBCCDD\")\n\"AA-BB-CC-ZZZ427\"\n\njulia> render_alphanumeric(\"__-^^-==-ZZZ###\"; letters = \"AABBCCDD\", numbers = \"12345\")\n\"AA-BB-CC-ZZZ123\"\n\njulia> render_alphanumeric(\"_______\"; letters = \"abc\")\n\"abcomhd\"\n\n\n\n\n\n","category":"function"},{"location":"utilities/templatization/#Impostor.render_alphanumeric_range","page":"Templatization","title":"Impostor.render_alphanumeric_range","text":"render_alphanumeric_range(template::AbstractString) :: String\n\nGenerate a string containing a number from a numeric range template. Such numeric templates may contain options separated by a ';' caracter. Additionally, options can assume a single template format (e.g. \"4##\") or specify a range using the ':' character inside the option (e.g. \"2##:3##\" specifies numbers between 200 and 399).\n\nExample\n\njulia> render_alphanumeric_range(\"4#####\")\n\"412345\"\n\njulia> render_alphanumeric_range(\"34####;37####\")  # selects 34#### or 37####\n\"349790\"\n\njulia> render_alphanumeric_range(\"51####:55####\")\n\"532489\"\n\njulia> render_alphanumeric_range(\"2221##:2720##;51####:55####\")  # selects 2221##:2720## or 51####:55####\n\"250000\"\n\n\n\n\n\n","category":"function"},{"location":"utilities/templatization/","page":"Templatization","title":"Templatization","text":"","category":"page"},{"location":"utilities/utility_functions/#Utilities","page":"Utility Functions","title":"Utilities","text":"","category":"section"},{"location":"utilities/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"The following utility functions are available:","category":"page"},{"location":"utilities/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"Impostor.coerse_string_type\nsetlocale!\nsession_locale\nresetlocale!\nis_provider_available\nis_content_available\nis_locale_available","category":"page"},{"location":"utilities/utility_functions/#Impostor.coerse_string_type","page":"Utility Functions","title":"Impostor.coerse_string_type","text":"coerse_string_type(v::Vector{<:AbstractString}) :: Union{String, Vector{String}}\n\nAutomatically unpack the return value of a generator function into a single string, when appropriate.\n\nParameters\n\nv::Vector{<:AbstractString}: value(s) returned by some generator function.\n\nExample\n\njulia> Impostor.coerse_string_type([\"Mark\"])\n\"Mark\"\n\njulia> Impostor.coerse_string_type([\"Mark\", \"Jane\"])\n2-element Vector{String}:\n \"Mark\"\n \"Jane\"\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/#Impostor.setlocale!","page":"Utility Functions","title":"Impostor.setlocale!","text":"setlocale!(loc::String)\nsetlocale!(loc::Vector{<:AbstractString})\n\nSet loc as the default locale for the current session.\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/#Impostor.session_locale","page":"Utility Functions","title":"Impostor.session_locale","text":"session_locale() :: Vector{String}\n\nReturn the current session locale.\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/#Impostor.resetlocale!","page":"Utility Functions","title":"Impostor.resetlocale!","text":"resetlocale!()\n\nReset the current session locale to \"en_US\".\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/#Impostor.is_provider_available","page":"Utility Functions","title":"Impostor.is_provider_available","text":"is_provider_available(p::AbstractString) :: Bool\n\nReturn whether the provided p is available.\n\nParameters\n\np::AbstractString: provider name\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/#Impostor.is_content_available","page":"Utility Functions","title":"Impostor.is_content_available","text":"is_content_available(p::T, c::T) :: Bool where {T <: AbstractString}\n\nReturn whether the content c is available for provider p.\n\nParameters\n\np::AbstractString: provider name\nc::AbstractString: content name\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/#Impostor.is_locale_available","page":"Utility Functions","title":"Impostor.is_locale_available","text":"is_locale_available(p::T, c::T, l::T) :: Bool where {T <: AbstractString}\n\nReturn whether the provided locale l is available for content c from provider p.\n\nParameters\n\np::AbstractString: provider name\nc::AbstractString: content name\nl::AbstractString: locale name\n\n\n\n\n\n","category":"function"},{"location":"utilities/utility_functions/","page":"Utility Functions","title":"Utility Functions","text":"","category":"page"},{"location":"developer_guide/data_interface/#Data-Interface","page":"Data Interface","title":"Data Interface","text":"","category":"section"},{"location":"developer_guide/data_interface/","page":"Data Interface","title":"Data Interface","text":"Impostor._load!\nImpostor.is_provider_loaded\nImpostor.is_content_loaded\nImpostor.is_locale_loaded","category":"page"},{"location":"developer_guide/data_interface/#Impostor._load!","page":"Data Interface","title":"Impostor._load!","text":"_load!(provider::T, content::T, locale::Vector{T}) :: DataFrame where {T <: AbstractString}\n_load!(provider::T, content::T, locale::T = \"noloc\") :: DataFrame where {T <: AbstractString}\n\nFetch from the data archive the content associated to the provided locale and provider. Data is returned as a DataFrame for further manipulation. Optionally provide locale = \"noloc for the specific contents without any locale assocated to them.\n\nParameters\n\nprovider::AbstractString: provider name, e.g. \"localization\".\ncontent::AbstractString: content name, e.g. \"street_prefix\".\nlocale::Union{AbstractString, Vector{AbstractString}} = \"noloc\": locale(s) associated to the content and provider provided. Defaults to the \"noloc\" placeholder for contents which are considered \"locale-less\".\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/data_interface/#Impostor.is_provider_loaded","page":"Data Interface","title":"Impostor.is_provider_loaded","text":"is_provider_loaded(d::DataContainer, provider::AbstractString) :: Bool\n\nReturn whether the DataContainer d has already loaded the information associated to the content c.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/data_interface/#Impostor.is_content_loaded","page":"Data Interface","title":"Impostor.is_content_loaded","text":"is_content_loaded(d::DataContainer, provider::T, content::T) :: Bool\n\nReturn whether the DataContainer d has already loaded the information associated to the content c from provider p.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/data_interface/#Impostor.is_locale_loaded","page":"Data Interface","title":"Impostor.is_locale_loaded","text":"is_locale_loaded(d::DataContainer, provider::T, content::T, locale::T) :: Bool\n\nReturn whether the DataContainer d has already loaded the information associated to the content c from provider p related to locale l.\n\n\n\n\n\n","category":"function"},{"location":"developer_guide/data_interface/","page":"Data Interface","title":"Data Interface","text":"","category":"page"},{"location":"developer_guide/quick_tour/#Quick-Tour","page":"Quick Tour (Start Here)","title":"Quick Tour","text":"","category":"section"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"This guide aims to provide a general overview of the internals of Impostor.jl. Some of the topics covered in this page are:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"High-level view of the functionality segregation.\nOrganization of data files used to generate the entries.\nHow to add new data to the package.\nHow to implement new generator-functions.","category":"page"},{"location":"developer_guide/quick_tour/#Design-and-Structure","page":"Quick Tour (Start Here)","title":"Design and Structure","text":"","category":"section"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Impostor doesn't magically generate valid names, street names, addreses or credit card numbers out of thin air, of course. Its generation process is based on the information contained in several .csv files structured according to which provider, content and locale each data refers to.","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Roughly speaking, when a user calls the generator function states([\"BRA\", \"USA\"], 20; level = :country_code) Impostor will internally fetch .csv data files with information about country codes and states, apply the appropriate filters and return correct number of generated entries respecting the restrictions imposed during the call of states.","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"The following figure depicts the data-flow process as a user requests the generation ","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"graph LR\n    subgraph Data Backend \n        direction LR\n        A[.csv 1] --- B\n        Z[.csv 2] --- B\n        X[.csv 3] --- B\n        Y[.csv 4] --- B\n        W[.csv n] --- B[_load!]\n        B --> D[data_interface.jl]\n    end\n    subgraph Package Internals \n        direction LR\n        G1[generator function 1]\n        D --> \n        G2[generator function 2]\n        G3[generator function 3]\n        G4[generator function n]\n    end\n\n    G2 --> Ge[Generated Entries]","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"The steps performed in this generation process can be broken down in two main \"components\":","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Data Backend: responsable for lazily loading the contents, ensuring consistency between the requests and maintaining the structure of the data archive. It is also its responsability to verify the existance of the requested data files erroring when they are not available.\nPackage Internals: serves as a client for the data backend, this component is responsible selecting the appropriate data files to be loaded and manipulate their contents to comply with the generator-function call restrictions when applicable (e.g. option-based or mask-based loading).","category":"page"},{"location":"developer_guide/quick_tour/#Archive-Organization","page":"Quick Tour (Start Here)","title":"Archive Organization","text":"","category":"section"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"The information contained in each of the .csv files is read into a DataFrame and stored in an internal structure vaguely called DataContainer. This struct encapsultes a list of currently selected locales for the Session Locale and a dictionary with sub-directories pointing to loaded DataFrames containing data consumed by the generator functions. The key-value structure used by this dictionary matches the organization of the .csv files under the src/data/ directory as follows:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"src/data/\n    <provider>/\n        <content>/\n            HEADER.txt\n            en_US.csv\n            pt_BR.csv\n            ...\n            en_UK.csv","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"In the structure above:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"provider encapsulates the associated Provider, e.g. Localization\ncontent stores the .csv files for a given Content, e.g. state codes. Each .csv content file is named after the locale it refers to.\nHEADER.txt is a text file storing exclusively names of columns for all files stored in the src/data/<provider>/<content>/ directory, one column name per line. This file ensures column naming consistency across all locales and prevents individual files from needlessly repeating the same column names. For that reason, every .csv file must contain only the associated data, leaving headers for the respective HEADER.txt files.","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"The interface between the data file structure shown above and the generator functions is stablished by the Impostor._load! method, which serves as a single point of access to all information stored in the src/data/ directory. When a generator-function internally calls","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Impostor._load!(\"localization\", \"state\", \"en_US\")","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"the structured archive is checked for the existance of a \"state\" content in the \"localization\" provider associated to the United States english (\"en_US\") locale. If such file is available, a DataFrame object is returned with the associated data for further manipulation. Since the column names for a given (\"localization\", \"state\") tuple are garanteed to be equal by design, multiple locales may be loaded at once:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Impostor._load!(\"localization\", \"state\", [\"en_US\", \"pt_BR\"])","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"note: Note on Implementation\nThe Impostor._load! is designed in such way that the DataFrames loaded in each interaction with the archive are memoized to prevent reading the same information more than once per session. This functionality is aided by the functions present in the Utility Function page.","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Once loaded, the data is manipulated according to the needs of the particular generator-function and always returned though the Impostor.coerse_string_type function which output formatting consistency.","category":"page"},{"location":"developer_guide/quick_tour/#Adding-New-Data","page":"Quick Tour (Start Here)","title":"Adding New Data","text":"","category":"section"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"In order to add new data files, contents or providers, carefully follow the same directory structure described in the previous section paying attention to the format of the HEADER.txt file. Some of the scenarios you will find while adding new data to the archive are shown below:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Incrementing existing locale files: corresponds to the simplest case, just add new rows to the respective .csv file. Typically, to ease navigation for users adding new data, the .csv are usually sorted by some of its columns, make your changes so that this property remains valid in the modified file.\nAdding new contents or providers: in both cases the creation of a new directory/set of directories is needed. Although this my be slightly subjective, try to do it so that the new set of directories resambles the current organization structure in data/ (when in doubt reach out via GitHub so we can discuss the best organization for the files).\nMake sure that a set of unit tests exist for the new content in order to ensure its consistency, place the implementation under the tests/data_integrity/ directory in a file called test_<your provider>.jl\nIf your data requires any kind of restriction (e.g. a certain column may only contain a restricted set of values), register such restrictions in the src/relation_restrictions.jl file.","category":"page"},{"location":"developer_guide/quick_tour/#Adding-New-Functions","page":"Quick Tour (Start Here)","title":"Adding New Functions","text":"","category":"section"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Some guide-lines on adding new generator-functions are:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Make sure that that contents required for the new generator-function are available under the data archive in src/data/. If not, then proceed to the previous section on adding new data.\nUse exclusively the Impostor._load! function to interact with the data archive. In order to manipulate the dataframe(s) according to your needs, the functions exported by DataFrames.jl should suffice most use cases. If you need other package(s) to manipulate the dataframes in order to get the desired output, file an issue explaining the situation and we will discuss the addition of a new dependency.\nAdd the new generator-function to the export list in the src/Impostor.jl in the appropriate Provider grouping. Make sure to add it in alphabetical order in each group.\nAdd docstrings with examples, when possible/applicable.","category":"page"},{"location":"developer_guide/quick_tour/#Testing-Philosophy","page":"Quick Tour (Start Here)","title":"Testing Philosophy","text":"","category":"section"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"Tests in Impostor are split in two categories: implementation correctness tests (the usual case for virtually all unit-tested codebases); and data integrity tests which ensure that properties of  data in each .csv are respected for each locale, content and provider. In this context, the testing philosophy used by this package is that:","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"If the contents of datafiles are exhaustively tested for consistency, then testing generator-functions becames a matter of ensuring output formatting correctness.","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"In this context, testing for consistency means that some set of validations is performed upon the files in src/data/ expecting to verify if the newly added data produces any unexpected behavior on the generator-function side of things.","category":"page"},{"location":"developer_guide/quick_tour/","page":"Quick Tour (Start Here)","title":"Quick Tour (Start Here)","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Impostor\nusing DataFrames\nusing CSV","category":"page"},{"location":"#What-is-Impostor.jl?","page":"Introduction","title":"What is Impostor.jl?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Impostor is a synthetic tabular-data generator based on random samplings over pre-defined values. One of the main features of Impostor is its ability to generate data making sense of relations between columns.","category":"page"},{"location":"#Avaliable-Providers","page":"Introduction","title":"Avaliable Providers","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages = [\n    \"providers/identity.md\",\n    \"providers/finance.md\",\n    \"providers/localization.md\",\n]\nDepth = 1","category":"page"},{"location":"#Getting-Started","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"First of all, let's make sure that the Impostor package is installed in your current environment:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg; Pkg.add(\"Impostor\")","category":"page"},{"location":"#Generator-Functions","page":"Introduction","title":"Generator Functions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To get started with Impostor, select your generator function of choice, the simplest example is to generate single and multiple values specifying the number of expected values in the output.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"firstname(5)\nfirstname()  # equivalent to firstname(1)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Generator functions may be found in each of the Providers individual pages or via the API Reference page.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Note\nWhen a single value is produced by the generator function, as in firstname(1) from the example above, the returned valued is automatically unpacked into a String (or other applicable type depending on the generator function) instead of being returned as a Vector with exactly 1 element.This behavior might change in future releases.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"All generator functions accept a locale keyword argument, in case no value is provided in the locale kwarg the Session Locale is used (see section Concepts below).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"firstname(2; locale = [\"pt_BR\"])\nfirstname(2; locale = [\"en_US\", \"pt_BR\"])","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In order to change the default locale used by the session use the setlocale! function:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"setlocale!(\"pt_BR\");\nfirstname(2)\nresetlocale!(); # hide","category":"page"},{"location":"#Impostor-Templates","page":"Introduction","title":"Impostor Templates","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Besides providing several generator functions which may be used as standalone data series generators, Impostor also exports the ImpostorTemplate which is a utility struct to encapsulate formats and generate a fully fledgned table.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"template = ImpostorTemplate([:firstname, :surname, :country_code, :state, :city]);\n\ntemplate(3)\n\ntemplate(5, DataFrame; locale = [\"pt_BR\", \"en_US\"]) # optionally provide a `sink` type","category":"page"},{"location":"#Concepts","page":"Introduction","title":"Concepts","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"In order to facilitate naming and referencing later on the major concepts implemented are described below:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Generator Functions: are the users' main point of interaction when generating data, every function exported by Impostor which produces data is a generator function.\nProviders: are the broader domain in which the contents and generator functions are organized. For example some of the available providers in Impostor are Finance, Identity and Localization.\nContents: correspond to the specific intermediate kinds of data available for generator-functions to manipulate. For example, within the Localization provider, some of the available contents are street_format, street_prefix and street_suffix which are combined by the generator-functions like address and street to produce entries returned to the user.\nLocales determine the locale domain from which the each content is sampled in its respective generator function. For example, generating data with firstname(5; locale=[\"pt_BR\"]) will generate the content \"firstname\" from the provider \"Identity\" corresponding to names typical to the brazillian portuguese language. \nSession Locale: corresponds to the default locale used by the generator functions when no locale is explicitly provided as a kwarg. The session locale can be set at any time with the setlocale! function, taking on also multiple values for the session locale, e.g. setlocale!([\"pt_BR\", \"en_US\"]).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: Impostor Convention for Julia's Multiple-Dispatch\nThe convention followed by Impostor throughout its API is to rely on Julia's multiple-dispatch paradigm and provide users with 3 different methods for (almost) all generator functions. Such methods adhere to the following convention:Implementation Method Signature Desctiption\nValue-based func(n::Int) Simply generate an output with n entries produced by func.\nOption-based func(v::Vector, n::Int) Generates an output with n entries produced by func but restricting the generated entries to specified options in v, which specific contents will depend on func. Generator functions taking on options in different levels accept the level kwarg, when that is the case, docstrings will explain each specific behavior.\nMask-based func(v::Vector) Generates an output with length(v) entries produced by func. The contents of v specify element-wise options to restrict the output of func. Equivalent in terms of output with calling [func(opt, 1) for opt in v] (i.e. the option-based generation), but sub-optimal in terms of performance. Generator functions taking on masks in different levels accept the level kwarg, when it is the case, docstrings will explain each specific behavior.firstname(3)  # value-based generation\nfirstname([\"F\"], 3)  # option-based generation\nfirstname([\"F\", \"M\", \"F\"])  # mask-based generation","category":"page"},{"location":"#Contributing","page":"Introduction","title":"Contributing","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Contributions are welcome, both in implementation, documentation and data addition to the static files.  Don't hesitate to reach out and request features, file issues or make any suggestions.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For the specific cases of contributing with code and/or data addition, we strongly suggest that you skim through the Quick Tour page in the Developer Guide section in order to get familiar with the structure and overall design of the package.","category":"page"},{"location":"#Roadmap","page":"Introduction","title":"Roadmap","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Future developments in Impostor will target the addition of different providers such as:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Business\nBusiness name\nBusiness field\nTechnology\nIPV4/6\nMAC address\nFile extension\nFile name\nVendor\nDevice\nContact\nE-mail\nUsername\nPhone number\nSocial media\nColor\nRGB Color\nHex-Color","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"utilities/impostor_templates/#Impostor-Templates","page":"Impostor Templates","title":"Impostor Templates","text":"","category":"section"},{"location":"utilities/impostor_templates/","page":"Impostor Templates","title":"Impostor Templates","text":"Modules = [Impostor]\nOrder = [:type, :function]\nPages = [\"src/impostor_template.jl\"]","category":"page"},{"location":"utilities/impostor_templates/#Impostor.ImpostorTemplate","page":"Impostor Templates","title":"Impostor.ImpostorTemplate","text":"(impostor::ImpostorTemplate)(n::Integer = 1, sink = Dict; kwargs...)\n\nGenerate n entries according to the format provided when impostor was instantiated.\n\nParameters\n\nn: number of entries/rows to generate in each format\nsink = Dict: type sink for the generated table.\n\nKwargs\n\nlocale::Vector{String}: locale(s) from which entries are sampled. If no locale is provided, the current session locale is used.\n\nExamples\n\njulia> formats = [\"complete_name\", \"credit_card_number\", \"credit_card_expiry\"];\n\njulia> template = ImpostorTemplate(formats)\nImpostorTemplate([:complete_name, :credit_card_number, :credit_card_expiry])\n\njulia> template(3, DataFrame)\n3×3 DataFrame\n Row │ complete_name                  credit_card_number  credit_card_expiry\n     │ String                         String              String\n─────┼───────────────────────────────────────────────────────────────────────\n   1 │ Sophie Cornell Collins         52583708162384822   6/2008\n   2 │ Mary Collins Cornell           3442876938992966    10/2022\n   3 │ John Sheffard Cornell Collins  4678055537702596    10/2021\n\njulia> template(3, DataFrame; locale = [\"pt_BR\"])\n3×3 DataFrame\n Row │ complete_name                      credit_card_number  credit_card_expiry\n     │ String                             String              String\n─────┼───────────────────────────────────────────────────────────────────────────\n   1 │ João Camargo da Silva Pereira      3418796429393351    4/2018\n   2 │ João Pereira da Silva              4305288858368967    6/2018\n   3 │ Bernardo Pereira Camargo da Silva  3751513143972989    3/2024\n\n\n\n\n\n","category":"type"},{"location":"utilities/impostor_templates/#Impostor.ImpostorTemplate-2","page":"Impostor Templates","title":"Impostor.ImpostorTemplate","text":"ImpostorTemplate(formats::Union{T, S, Vector{Union{T, S}}}) where {T<:AbstractString, S<:Symbol}\n\nStruct storing the formats used to generate new tables. Each of the elements in formats maps to a generator function exported by Impostor. This struct is later used as a functor in order to generate data, that is, after instantiating a new ImpostorTemplate object, this object will be called providing arguments in order to generate the data entries.\n\nParameters\n\nformats (String, Symbol or Vector{Union{String, Symbol}}): table output format specified in terms of generator functions to be used in each column (see examples below).\n\nExamples\n\njulia> imp = ImpostorTemplate(\"firstname\")\nImpostorTemplate([:firstname])\n\njulia> imp = ImpostorTemplate(:firstname)\nImpostorTemplate([:firstname])\n\njulia> imp = ImpostorTemplate([\"firstname\"])\nImpostorTemplate([:firstname])\n\njulia> imp = ImpostorTemplate([:firstname])\nImpostorTemplate([:firstname])\n\n\n\n\n\n","category":"type"},{"location":"utilities/impostor_templates/#Impostor._all_formats_availabe-Tuple{Vector{Symbol}}","page":"Impostor Templates","title":"Impostor._all_formats_availabe","text":"_all_formats_available(formats::Vector)\n\nVerify if all formats are available and exported by Impostor.jl, otherwise throw ArgumentError\n\n\n\n\n\n","category":"method"},{"location":"utilities/impostor_templates/","page":"Impostor Templates","title":"Impostor Templates","text":"","category":"page"}]
}
